############################ IMPORTS ############################
require 'date'
require 'credentials_manager'
require 'yaml'
require 'fileutils'
require 'erb'

######################### PRECONDITIONS #########################
default_platform :ios
######################### PUBLIC LANES ##########################

desc 'В мире животных'
lane :animal_build do |options|
  version_number = ENV['VERSION']
  build_number = obtain_build_number
  branch = ENV['BRANCH_NAME']

  options[:branch] = branch
  options[:version_number] = version_number
  options[:build_number] = build_number

  # Setting up app options
  setting_app_options(options)

  # Switching to Hockey
  pre_upload_action(options)
  dd_hockey(options)
  post_upload_action(options)

  # Setting output message
  @result = "#{@name} #{version_number}.#{build_number} (animal build) uploaded to Hockey"
end

desc 'Submit a new nightly build from develop branch to FTP'
lane :staging do |options|
  print("options: #{options}")
  options[:type] = 'Staging'
  # Reset and clean working copy if needed
  git_reset unless options[:skip_reset]

  # Setting up the default branch. Checks out release/x.x.x or hotfix/x.x.x if there are suitable branches, or creates a new branch release/x.x.x
  version = ENV['VERSION']
  customer_tag = ENV['CUSTOMER_TAG']

  # Collecting a changelog from commit list
  #
  branch = git_checkout_release(version: version)
  options[:branch] = branch

  # Setting up a new version
  options[:version_number] = version
  options[:build_number] = obtain_build_number

  # Setting up git tag as 'staging/3.0.0/56'
  #current_version = get_version_number(xcodeproj: ENV['XCODEPROJ_NAME'], target: ENV['SCHEME'])
  current_version = ENV['VERSION']
  current_build = obtain_build_number
  staging_tag = "#{customer_tag}_staging/#{current_version}/#{current_build}"
  options[:tags] = [staging_tag]

  # Setting up the icon badge
  shield_text = "#{customer_tag}_staging"
  options[:shield_text] = shield_text

  # Setting up rules for changelog collecting
  options[:tag_match_pattern] = "#{customer_tag}_staging/*"
  options[:release_tag_match_pattern] = "#{customer_tag}_release/*"

  # Setting up app options
  setting_app_options(options)

  # Switching to Hockey
  pre_upload_action(options)
  dd_hockey(options)
  post_upload_action(options)

  dd_slack(options)
  # Setting output message
  @result = "#{@name} #{current_version}.#{current_build} (staging) uploaded to Hockey"
end

desc 'Submit a new nightly build from develop branch to Hockey'
lane :nightly do |options|
  options[:type] = 'Nightly'
  customer_tag = ENV['CUSTOMER_TAG']
  # Little hack: deleting all local tags to avoid problems with tag 'nightly/latest'
  sh('git tag | xargs git tag -d')
  sh("git fetch origin 'refs/tags/#{customer_tag}_nightly/latest:refs/tags/#{customer_tag}_nightly/latest'") rescue ''

  options[:tag_match_pattern] = "#{customer_tag}_nightly/*"
  options[:release_tag_match_pattern] = "#{customer_tag}_release/*"

  # Collecting a changelog from commit list
  changelog = changelog_from_git_commits(
      tag_match_pattern: options[:tag_match_pattern]
  )

  changelog_empty = changelog.nil? || changelog.empty?
  @result = 'no changes' if changelog_empty

  # Setting up the default branch
  options[:branch] = 'develop'

  # Setting up git tags as 'nightly/2016/5/5' and 'nightly/latest'
  month = Date.today.month
  year = Date.today.year
  day = Date.today.day
  current_tag = "#{customer_tag}_nightly/#{year}/#{month}/#{day}"
  options[:tags] = ["#{customer_tag}_nightly/latest", current_tag]
  puts(current_tag)

  current_version = get_version_number(xcodeproj: ENV['XCODEPROJ_NAME'], target: ENV['SCHEME'])
  current_build = obtain_build_number

  options[:version_number] = current_version
  options[:build_number] = obtain_build_number

  # Setting up the icon badge
  shield_text = "#{customer_tag}_nightly"
  options[:shield_text] = shield_text

  # Setting up app options
  setting_app_options(options)


  # Switching to ftp lane only if there were any changes
  unless changelog_empty
    # Switching to Hockey
    pre_upload_action(options)
    dd_hockey(options)
    post_upload_action(options)
    dd_slack(options)
    @result = "#{@name} #{current_version}.#{current_build} (nightly) uploaded to Hockey"
  end
end

desc 'Submit a new release build from master branch to Hockey'
lane :release do |options|
  options[:type] = 'Release'
  # Reset and clean working copy if needed
  git_reset unless options[:skip_reset]
  customer_tag = ENV['CUSTOMER_TAG']

  # Setting up the default branch -- master
  options[:branch] = 'master'

  current_version = get_version_number(xcodeproj: ENV['XCODEPROJ_NAME'], target: ENV['SCHEME'])
  options[:version_number] = current_version
  options[:build_number] = obtain_build_number

  # Setting up git tag as 'release/3.0.0/56'
  current_build = obtain_build_number
  release_tag = "#{customer_tag}_release/#{current_version}/#{current_build}"
  options[:tags] = [release_tag]

  # Setting up rules for changelog col lecting
  options[:tag_match_pattern] = "#{customer_tag}_release/*"

  # Setting up app options
  setting_app_options(options)

  # Switching to Hockey
  pre_upload_action(options)
  dd_hockey(options)
  post_upload_action(options)

  dd_slack(options)
  # Setting output message
  @result = "#{@name} #{current_version}.#{current_build} (release) uploaded to Hockey"
end

desc 'Submit a new build from develop branch to Hockey (testing flow)'
lane :testing do |options|

  options[:type] = 'QA'
  # Setting up the default branch
  options[:branch] = 'develop'
  customer_tag = ENV['CUSTOMER_TAG']

  # Setting up git tag as 'testing/3.0.0/56'
  current_version = get_version_number(xcodeproj: ENV['XCODEPROJ_NAME'], target: ENV['SCHEME'])
  current_build = obtain_build_number
  testing_tag = "#{customer_tag}_testing/#{current_version}/#{current_build}"
  options[:tags] = [testing_tag]

  # Setting up a new version
  options[:version_number] = current_version
  options[:build_number] = obtain_build_number

  # Setting up the icon badge
  shield_text = "#{customer_tag}_testing"
  options[:shield_text] = shield_text

  # Setting up rules for changelog collecting
  options[:tag_match_pattern] = "#{customer_tag}_testing/*"
  options[:release_tag_match_pattern] = "#{customer_tag}_release/*"

  # Setting up app options
  setting_app_options(options)

  # Switching to Hockey lane
  pre_upload_action(options)
  dd_hockey(options)
  post_upload_action(options)

  dd_slack(options)
  # Setting output message
  @result = "#{@name} #{current_version}.#{current_build} (testing) uploaded to Hockey"
end

private_lane :dd_slack do |options|
  build_type = options[:type]

  version = "#{options[:version_number]}.#{options[:build_number]}"
  url = obtain_hockey_link
  app_name = "#{ENV["APP_NAME"]}|#{ENV["CUSTOMER_TAG"]}|#{build_type}"
  slack(
      message: "[#{app_name}|#{version}] has been submitted to Hockey :rocket:",
      success: true,
      use_webhook_configured_username_and_icon: true,
      payload: {
          'Hockey App Download URL' => url,
          :changelog => @jira_changelog
      },
      default_payloads: [:last_git_commit_hash]
  )
end

def parse_version_from_url(uri)
  URI(uri).path.split('/').last
end

desc 'Prepares the build and uploads it to Fabric'
private_lane :dd_hockey do |options|
  # Variables declaration
  team_name = obtain_team_name

  # Getting version number
  version_number = options[:version_number]
  build_number = options[:build_number]

  # Setting up the icon badge
  shield_text = options[:shield_text]
  if shield_text
    shield_data = "#{shield_text}-#{version_number}.#{build_number}-blue"
    print("shield_data: #{shield_data}")
    badge(shield: shield_data, dark: true)
  end

  configuration = ENV['CONFIGURATION'] || 'Release'
  clear_derived_data
  # Building the ipa file
  gym(
      workspace: ENV['XCWORKSPACE_NAME'],
      scheme: ENV['SCHEME'],
      output_name: ENV['SCHEME'],
      configuration: configuration,
      clean: true,
      codesigning_identity: team_name,
      xcargs: xcode_args(options),
      disable_xcpretty: options[:disable_xcpretty],
      export_method: 'enterprise'
  )

  hockey(
      api_token: ENV['HOCKEY_API_TOKEN'],
      create_update: true,
      public_identifier: ENV['HOCKEY_APP_ID'],
      status: '2',
      create_status: '2',
      release_type: '3',
      bundle_short_version: version_number,
      bundle_version: build_number,
      ipa: "#{ENV['SCHEME']}.ipa",
      notes: @jira_changelog,
  )
end

def pre_upload_action(options)
  # Reset and clean working copy if needed
  git_reset unless options[:skip_reset]

  # Checking out the passed branch
  branch = options[:branch]
  git_checkout(remote_branch: branch)

  # Update pods
  cocoapods(
      clean: true,
      try_repo_update_on_error: true
  )

  # New version number has to be specified explicitly
  version_number = options[:version_number]
  build_number = options[:build_number]
  raise 'Missing version number: use version_number parameter' unless version_number != nil
  Actions.lane_context[SharedValues::VERSION_NUMBER] = version_number

  # Increment build
  increment_build_number(options)

  root_plists = options[:root_plists]
  if root_plists
    root_plists.each {|root_plist|
      update_root_plist(
          file: root_plist,
          key: 'DDSettingsApplicationBuildNumber',
          value: "#{version_number} (#{build_number})"
      )
    }
  end

  # Collecting a full changelog consisting of JIRA tasks
  default_changelog = jira_changelog(options[:tag_match_pattern])
  if default_changelog.empty?
    @jira_changelog = 'Current build changes: empty';
  else
    @jira_changelog =  "Current build changes:\n#{default_changelog}"
  end

  if options[:release_tag_match_pattern]
    changelog_from_release = jira_changelog(options[:release_tag_match_pattern])
    if changelog_from_release.empty?
      @jira_changelog += "\n Release changes:\n#{changelog_from_release}"
    else
      @jira_changelog += "\n Release changes: empty"
    end
  end

  current_branch = git_branch()
  @jira_changelog ||= ''
  @jira_changelog += "\n" unless @jira_changelog.empty?
  @jira_changelog += "Branch:\n#{current_branch}"
end

def update_root_plist(params)
  require 'plist'
  path = File.expand_path(params[:file]).sub! 'fastlane/', ''
  plist = Plist.parse_xml(path)
  # Set the XML position of the Version item
  plist['PreferenceSpecifiers'].each {|item|
    item['DefaultValue'] = params[:value] if item['Key'] == params[:key]
  }
  new_plist = plist.to_plist
  File.write(path, new_plist)
end

def post_upload_action(options)
  # Some cleaning
  clean_build_artifacts
  clear_derived_data
  git_reset

  # Add tag to git
  tags = options[:tags]
  if tags
    multiple_tags(tags: tags)
    branch = options[:branch]
    sh("git push -uf origin #{branch}")
  end
  preconfigure_report(options)
  generate_build_report
end

def preconfigure_report(options)
  @hockey_url = obtain_hockey_link
end

def jira_changelog(tag_match_pattern)
  puts "tag_match_pattern: #{tag_match_pattern}"
  raw_changelog = changelog_from_git_commits(
      tag_match_pattern: tag_match_pattern
  )
  return 'empty' unless raw_changelog != nil
  merge_changelog = raw_changelog.scan(/Merge branch '(feature|bugfix)\/(\S+)'/).map {|message|
    "http://ddsm-jira.digdes.com/browse/#{message[1]}"
  }
  commit_changelog = raw_changelog.scan(/\[(\S+-\S+)\]/).uniq.map {|message|
    "http://ddsm-jira.digdes.com/browse/#{message[0]}"
  }
  [merge_changelog, commit_changelog].flatten.uniq.sort.join("\n")
end

def jira_only_changelog(tag_match_pattern, jira_project)
  raw_changelog = changelog_from_git_commits(
      tag_match_pattern: tag_match_pattern
  )
  return 'empty' unless raw_changelog != nil

  regexp = Regexp.new("(#{jira_project}-[0-9]*)(?:.*\#comment (.*))?").freeze

  messages = raw_changelog.split("\n").select {|message|
    message.match(regexp)
  }.map {|message|
    jira_issue_id = message.match(regexp)[1]
    comment = message.match(regexp)[2]
    formatted_comment = comment && !comment.empty? ? " – #{comment}" : ''
    "http://ddsm-jira.digdes.com/browse/#{jira_issue_id}#{formatted_comment}"
  }
  messages.count > 0 ? messages.uniq.join("\n") : 'No closed JIRA-issues'
end

def increment_build_number(options)
  build_number = options[:build_number]
  update_build_and_version_with_extensions(options, build_number)
  Actions.lane_context[SharedValues::BUILD_NUMBER] = build_number
end

def generate_build_report
  erb_file = 'fastlane_result.html.erb'
  html_file = File.basename(erb_file, '.erb') #=>"page.html"

  erb_str = File.read(erb_file)

  renderer = ERB.new(erb_str)
  result = renderer.result

  File.open(html_file, 'w') do |f|
    f.write(result)
  end
end

def update_build_and_version_with_extensions(options, build_number)
  app_plists = options[:app_plists]
  version_number = options[:version_number]

  app_plists = [get_info_plist_path] if app_plists == nil

  app_plists.each {|app_plist|
    set_info_plist_value(
        path: app_plist,
        key: 'CFBundleVersion',
        value: "#{build_number}"
    )
    set_info_plist_value(
        path: app_plist,
        key: 'CFBundleShortVersionString',
        value: "#{version_number}"
    )
  }
end

def get_info_plist_path
  File.join(ENV['XCODEPROJ_NAME'], '..', ENV['INFO_PLIST_PATH'])
end

def setting_app_options(options)
  app_identifier = main_app_identifier(options)

  options[:app_identifiers] = [app_identifier] unless options[:app_identifiers]
  options[:target_patterns] = ["^#{ENV['SCHEME']}$"] if !options[:target_patterns] && ENV['SCHEME']
  options[:app_plists] = [ENV['INFO_PLIST_PATH']] if !options[:app_plists] && ENV['INFO_PLIST_PATH']
end

def main_app_identifier(options)
  main_app_identifier = ENV['APP_IDENTIFIER']
  main_app_identifier = options[:main_app_identifier] if options[:main_app_identifier]

  main_app_identifier
end

def obtain_hockey_link
  context = lane_context[SharedValues::HOCKEY_BUILD_INFORMATION]
  config_url = context['config_url']
  "#{lane_context[SharedValues::HOCKEY_DOWNLOAD_LINK]}/app_versions/#{parse_version_from_url(config_url)}"
end

def obtain_build_number
  ENV['BUILD_NUMBER']
end

def obtain_team_name
  ENV['TEAM_NAME']
end

def xcode_args(options)
  team_id = ENV['TEAM_ID']
  "DEVELOPMENT_TEAM=#{team_id}"
end

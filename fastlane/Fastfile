############################ IMPORTS ############################
require 'date'
require 'credentials_manager'
require 'yaml'
require 'fileutils'

######################### PRECONDITIONS #########################
default_platform :ios
######################### PUBLIC LANES ##########################

desc "Submit a new build from develop branch to Hockey (testing flow)"
lane :testing do |options|
  # Setting up the default branch
  options[:branch] = 'develop'

  # Setting up git tag as 'testing/3.0.0/56'
  current_version = get_version_number(xcodeproj: ENV['XCODEPROJ_NAME'])
  current_build = obtain_build_number
  testing_tag = "testing/#{current_version}/#{current_build}"
  options[:tags] = [testing_tag]

  # Setting up a new version
  options[:version_number] = current_version
  options[:build_number] = obtain_build_number

  # Setting up the icon badge
  shield_text = "testing"
  options[:shield_text] = shield_text

  # Setting up rules for changelog collecting
  options[:tag_match_pattern] = "testing/*"

  # Setting up app options
  setting_app_options(options)

  # Switching to Hockey lane
  pre_upload_action(options)
  dd_hockey(options)
  post_upload_action(options)

  # Setting output message
  @result = "#{@name} #{current_version}.#{current_build} (testing) uploaded to Hockey"
end

desc "Prepares the build and uploads it to Fabric"
private_lane :dd_hockey do |options|
  # Variables declaration
  team_name = obtain_team_name

  # Getting version number
  version_number = options[:version_number]
  build_number = options[:build_number]

  # Setting up the icon badge
  shield_text = options[:shield_text]
  shield_data = "#{shield_text}-#{version_number}.#{build_number}"
  add_badge(shield: shield_data, dark: true)

  # Building the ipa file
  gym(
      workspace: ENV['XCWORKSPACE_NAME'],
      scheme: ENV['SCHEME'],
      output_name: ENV['SCHEME'],
      configuration: "Release",
      clean: true,
      codesigning_identity: team_name,
      xcargs: xcode_args(options),
      disable_xcpretty: options[:disable_xcpretty],
      )

end

def pre_upload_action(options)
  # Reset and clean working copy if needed
  git_reset unless options[:skip_reset]

  # Checking out the passed branch
  branch = options[:branch]
  git_checkout(remote_branch: branch)

  # New version number has to be specified explicitly
  version_number = options[:version_number]
  raise "Missing version number: use version_number parameter" unless version_number != nil
  Actions.lane_context[SharedValues::VERSION_NUMBER] = version_number

  # Increment build
  increment_build_number(options)

  # Collecting a full changelog consisting of JIRA tasks
  jira_project = ENV['JIRA_PROJECT']
  if jira_project
    changelog = jira_only_changelog(options[:tag_match_pattern], jira_project)
    @jira_changelog = "List of changes:\n#{changelog}"
  end
  current_branch = git_branch()
  @jira_changelog ||= ''
  @jira_changelog += "\n" unless @jira_changelog.empty?
  @jira_changelog += "Branch:\n#{current_branch}"
end

def post_upload_action(options)
  # Some cleaning
  clean_build_artifacts
  clear_derived_data
  git_reset

  # Search jira issues
  # jira_project = ENV['JIRA_PROJECT']
  # issues = nil
  # if jira_project
  #   issues = jira_issues(options[:tag_match_pattern],
  #                        jira_project)
  # end

  # Add tag to git
  tags = options[:tags]
  multiple_tags(tags: tags)

  branch = options[:branch]
  sh("git push -uf origin #{branch}")

  # Move issues in jira
  # if jira_project && issues
  #   jira_options = {
  #       :issue_ids            => issues,
  #       :jira_username        => ENV['JIRA_USERNAME'],
  #       :jira_password        => ENV['JIRA_PASSWORD'],
  #       :jira_host            => ENV['JIRA_HOST'],
  #       :jira_transition_name => ENV['JIRA_TRANSITION_NAME'],
  #   }
  #   jira_work_flow(jira_options)
  # end
end

def jira_only_changelog(tag_match_pattern, jira_project)
  raw_changelog = changelog_from_git_commits(
      tag_match_pattern: tag_match_pattern
  )
  return "empty" unless raw_changelog != nil

  regexp = Regexp.new("(#{jira_project}-[0-9]*)(?:.*\#comment (.*))?").freeze

  messages = raw_changelog.split("\n").select { |message|
    message.match(regexp)
  }.map { |message|
    jira_issue_id = message.match(regexp)[1]
    comment = message.match(regexp)[2]
    formatted_comment = comment && !comment.empty? ? " â€“ #{comment}" : ''
    "http://ddsm-jira.digdes.com/browse/#{jira_issue_id}#{formatted_comment}"
  }
  messages.count > 0 ? messages.uniq.join("\n") : "No closed JIRA-issues"
end

def increment_build_number(options)
  build_number = options[:build_number]
  update_build_and_version_with_extensions(options, build_number)
  Actions.lane_context[SharedValues::BUILD_NUMBER] = build_number
end

def update_build_and_version_with_extensions(options, build_number)
  app_plists = options[:app_plists]
  version_number = options[:version_number]

  if app_plists == nil
    app_plists = [get_info_plist_path]
  end

  app_plists.each { |app_plist|
    set_info_plist_value(
        path: app_plist,
        key: 'CFBundleVersion',
        value: "#{build_number}"
    )
    set_info_plist_value(
        path: app_plist,
        key: 'CFBundleShortVersionString',
        value: "#{version_number}"
    )
  }
end

def get_info_plist_path
  File.join(ENV['XCODEPROJ_NAME'], '..', ENV['INFO_PLIST_PATH'])
end

def setting_app_options(options)
  app_identifier = main_app_identifier(options)

  options[:app_identifiers] = [app_identifier] unless options[:app_identifiers]
  options[:target_patterns] = ["^#{ENV['SCHEME']}$"] if !options[:target_patterns] && ENV['SCHEME']
  options[:app_plists] = [ENV['INFO_PLIST_PATH']] if !options[:app_plists] && ENV['INFO_PLIST_PATH']
end

def main_app_identifier(options)
  main_app_identifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)
  main_app_identifier = options[:main_app_identifier] if options[:main_app_identifier]

  main_app_identifier
end


def obtain_build_number
  600
end

def obtain_team_name
  CredentialsManager::AppfileConfig.try_fetch_value(:team_name)
end

def xcode_args(options)
  team_id = CredentialsManager::AppfileConfig.try_fetch_value(:team_id)
  "DEVELOPMENT_TEAM=#{team_id}"
end